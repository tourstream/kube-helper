package service

import "google.golang.org/api/dns/v1"
import "net/http"
import "k8s.io/client-go/kubernetes"
import "kube-helper/loader"
import "github.com/stretchr/testify/mock"
import (
	"google.golang.org/api/sqladmin/v1beta4"
	"google.golang.org/api/compute/v1"
)

// MockBuilderInterface is an autogenerated mock type for the BuilderInterface type
type MockBuilderInterface struct {
	mock.Mock
}

// GetApplicationService provides a mock function with given fields: client, namespace, config
func (_m *MockBuilderInterface) GetApplicationService(client kubernetes.Interface, namespace string, config loader.Config) (ApplicationServiceInterface, error) {
	ret := _m.Called(client, namespace, config)

	var r0 ApplicationServiceInterface
	if rf, ok := ret.Get(0).(func(kubernetes.Interface, string, loader.Config) ApplicationServiceInterface); ok {
		r0 = rf(client, namespace, config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ApplicationServiceInterface)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(kubernetes.Interface, string, loader.Config) error); ok {
		r1 = rf(client, namespace, config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClient provides a mock function with given fields: scope
func (_m *MockBuilderInterface) GetClient(scope ...string) (*http.Client, error) {
	_va := make([]interface{}, len(scope))
	for _i := range scope {
		_va[_i] = scope[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Client
	if rf, ok := ret.Get(0).(func(...string) *http.Client); ok {
		r0 = rf(scope...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Client)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...string) error); ok {
		r1 = rf(scope...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClientSet provides a mock function with given fields: config
func (_m *MockBuilderInterface) GetClientSet(config loader.Config) (kubernetes.Interface, error) {
	ret := _m.Called(config)

	var r0 kubernetes.Interface
	if rf, ok := ret.Get(0).(func(loader.Config) kubernetes.Interface); ok {
		r0 = rf(config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kubernetes.Interface)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(loader.Config) error); ok {
		r1 = rf(config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetComputeService provides a mock function with given fields:
func (_m *MockBuilderInterface) GetComputeService() (*compute.Service, error) {
	ret := _m.Called()

	var r0 *compute.Service
	if rf, ok := ret.Get(0).(func() *compute.Service); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.Service)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDNSService provides a mock function with given fields:
func (_m *MockBuilderInterface) GetDNSService() (*dns.Service, error) {
	ret := _m.Called()

	var r0 *dns.Service
	if rf, ok := ret.Get(0).(func() *dns.Service); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dns.Service)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImagesService provides a mock function with given fields:
func (_m *MockBuilderInterface) GetImagesService() (ImagesInterface, error) {
	ret := _m.Called()

	var r0 ImagesInterface
	if rf, ok := ret.Get(0).(func() ImagesInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ImagesInterface)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKindService provides a mock function with given fields: client, imagesService, config
func (_m *MockBuilderInterface) GetKindService(client kubernetes.Interface, imagesService ImagesInterface, config loader.Config) KindInterface {
	ret := _m.Called(client, imagesService, config)

	var r0 KindInterface
	if rf, ok := ret.Get(0).(func(kubernetes.Interface, ImagesInterface, loader.Config) KindInterface); ok {
		r0 = rf(client, imagesService, config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(KindInterface)
		}
	}

	return r0
}

// GetSqlService provides a mock function with given fields:
func (_m *MockBuilderInterface) GetSqlService() (*sqladmin.Service, error) {
	ret := _m.Called()

	var r0 *sqladmin.Service
	if rf, ok := ret.Get(0).(func() *sqladmin.Service); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqladmin.Service)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStorageService provides a mock function with given fields: bucket
func (_m *MockBuilderInterface) GetStorageService(bucket string) (BucketServiceInterface, error) {
	ret := _m.Called(bucket)

	var r0 BucketServiceInterface
	if rf, ok := ret.Get(0).(func(string) BucketServiceInterface); ok {
		r0 = rf(bucket)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(BucketServiceInterface)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(bucket)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
