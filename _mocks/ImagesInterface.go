package _mocks

import loader "kube-helper/loader"
import mock "github.com/stretchr/testify/mock"
import service "kube-helper/service"

// ImagesInterface is an autogenerated mock type for the ImagesInterface type
type ImagesInterface struct {
	mock.Mock
}

// DeleteManifest provides a mock function with given fields: manifest
func (_m *ImagesInterface) DeleteManifest(manifest string) error {
	ret := _m.Called(manifest)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(manifest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HasTag provides a mock function with given fields: config, tag
func (_m *ImagesInterface) HasTag(config loader.Cleanup, tag string) (bool, error) {
	ret := _m.Called(config, tag)

	var r0 bool
	if rf, ok := ret.Get(0).(func(loader.Cleanup, string) bool); ok {
		r0 = rf(config, tag)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(loader.Cleanup, string) error); ok {
		r1 = rf(config, tag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: config
func (_m *ImagesInterface) List(config loader.Cleanup) (*service.TagCollection, error) {
	ret := _m.Called(config)

	var r0 *service.TagCollection
	if rf, ok := ret.Get(0).(func(loader.Cleanup) *service.TagCollection); ok {
		r0 = rf(config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.TagCollection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(loader.Cleanup) error); ok {
		r1 = rf(config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Untag provides a mock function with given fields: tag
func (_m *ImagesInterface) Untag(tag string) error {
	ret := _m.Called(tag)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(tag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
