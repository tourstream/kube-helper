package _mocks

import io "io"
import mock "github.com/stretchr/testify/mock"

// BucketServiceInterface is an autogenerated mock type for the BucketServiceInterface type
type BucketServiceInterface struct {
	mock.Mock
}

// DeleteFile provides a mock function with given fields: filename
func (_m *BucketServiceInterface) DeleteFile(filename string) error {
	ret := _m.Called(filename)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(filename)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DownLoadFile provides a mock function with given fields: filename, serviceAccountEmailAddress
func (_m *BucketServiceInterface) DownLoadFile(filename string, serviceAccountEmailAddress string) (io.Reader, error) {
	ret := _m.Called(filename, serviceAccountEmailAddress)

	var r0 io.Reader
	if rf, ok := ret.Get(0).(func(string, string) io.Reader); ok {
		r0 = rf(filename, serviceAccountEmailAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Reader)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(filename, serviceAccountEmailAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveBucketACL provides a mock function with given fields: serviceAccount
func (_m *BucketServiceInterface) RemoveBucketACL(serviceAccount string) error {
	ret := _m.Called(serviceAccount)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(serviceAccount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetBucketACL provides a mock function with given fields: serviceAccountEmailAddress, role
func (_m *BucketServiceInterface) SetBucketACL(serviceAccountEmailAddress string, role string) error {
	ret := _m.Called(serviceAccountEmailAddress, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(serviceAccountEmailAddress, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UploadFile provides a mock function with given fields: targetFilename, originalFilename, serviceAccountEmailAddress
func (_m *BucketServiceInterface) UploadFile(targetFilename string, originalFilename string, serviceAccountEmailAddress string) error {
	ret := _m.Called(targetFilename, originalFilename, serviceAccountEmailAddress)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(targetFilename, originalFilename, serviceAccountEmailAddress)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
