package _mocks

import bucket "kube-helper/service/bucket"

import compute "google.golang.org/api/compute/v1"
import dns "google.golang.org/api/dns/v1"
import image "kube-helper/service/image"
import kubernetes "k8s.io/client-go/kubernetes"
import loader "kube-helper/loader"
import mock "github.com/stretchr/testify/mock"
import servicemanagement "google.golang.org/api/servicemanagement/v1"
import sqladmin "google.golang.org/api/sqladmin/v1beta4"

// ServiceBuilderInterface is an autogenerated mock type for the ServiceBuilderInterface type
type ServiceBuilderInterface struct {
	mock.Mock
}

// GetClientSet provides a mock function with given fields: config
func (_m *ServiceBuilderInterface) GetClientSet(config loader.Config) (kubernetes.Interface, error) {
	ret := _m.Called(config)

	var r0 kubernetes.Interface
	if rf, ok := ret.Get(0).(func(loader.Config) kubernetes.Interface); ok {
		r0 = rf(config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kubernetes.Interface)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(loader.Config) error); ok {
		r1 = rf(config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetComputeService provides a mock function with given fields:
func (_m *ServiceBuilderInterface) GetComputeService() (*compute.Service, error) {
	ret := _m.Called()

	var r0 *compute.Service
	if rf, ok := ret.Get(0).(func() *compute.Service); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.Service)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDNSService provides a mock function with given fields:
func (_m *ServiceBuilderInterface) GetDNSService() (*dns.Service, error) {
	ret := _m.Called()

	var r0 *dns.Service
	if rf, ok := ret.Get(0).(func() *dns.Service); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dns.Service)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImagesService provides a mock function with given fields:
func (_m *ServiceBuilderInterface) GetImagesService() (image.ImagesInterface, error) {
	ret := _m.Called()

	var r0 image.ImagesInterface
	if rf, ok := ret.Get(0).(func() image.ImagesInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(image.ImagesInterface)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceManagementService provides a mock function with given fields:
func (_m *ServiceBuilderInterface) GetServiceManagementService() (*servicemanagement.APIService, error) {
	ret := _m.Called()

	var r0 *servicemanagement.APIService
	if rf, ok := ret.Get(0).(func() *servicemanagement.APIService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicemanagement.APIService)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSqlService provides a mock function with given fields:
func (_m *ServiceBuilderInterface) GetSqlService() (*sqladmin.Service, error) {
	ret := _m.Called()

	var r0 *sqladmin.Service
	if rf, ok := ret.Get(0).(func() *sqladmin.Service); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqladmin.Service)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStorageService provides a mock function with given fields: bucketName
func (_m *ServiceBuilderInterface) GetStorageService(bucketName string) (bucket.BucketServiceInterface, error) {
	ret := _m.Called(bucketName)

	var r0 bucket.BucketServiceInterface
	if rf, ok := ret.Get(0).(func(string) bucket.BucketServiceInterface); ok {
		r0 = rf(bucketName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bucket.BucketServiceInterface)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(bucketName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
