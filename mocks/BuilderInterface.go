package mocks

import dns "google.golang.org/api/dns/v1"
import "net/http"
import "k8s.io/client-go/kubernetes"
import "github.com/stretchr/testify/mock"

import sqladmin "google.golang.org/api/sqladmin/v1beta4"
import storage "google.golang.org/api/storage/v1"

// BuilderInterface is an autogenerated mock type for the BuilderInterface type
type BuilderInterface struct {
	mock.Mock
}

// GetClient provides a mock function with given fields: scope
func (_m *BuilderInterface) GetClient(scope ...string) (*http.Client, error) {
	_va := make([]interface{}, len(scope))
	for _i := range scope {
		_va[_i] = scope[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Client
	if rf, ok := ret.Get(0).(func(...string) *http.Client); ok {
		r0 = rf(scope...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Client)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...string) error); ok {
		r1 = rf(scope...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClientSet provides a mock function with given fields: projectID, zone, clusterId
func (_m *BuilderInterface) GetClientSet(projectID string, zone string, clusterId string) (kubernetes.Interface, error) {
	ret := _m.Called(projectID, zone, clusterId)

	var r0 kubernetes.Interface
	if rf, ok := ret.Get(0).(func(string, string, string) kubernetes.Interface); ok {
		r0 = rf(projectID, zone, clusterId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kubernetes.Interface)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(projectID, zone, clusterId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDNSService provides a mock function with given fields:
func (_m *BuilderInterface) GetDNSService() (*dns.Service, error) {
	ret := _m.Called()

	var r0 *dns.Service
	if rf, ok := ret.Get(0).(func() *dns.Service); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dns.Service)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSqlService provides a mock function with given fields:
func (_m *BuilderInterface) GetSqlService() (*sqladmin.Service, error) {
	ret := _m.Called()

	var r0 *sqladmin.Service
	if rf, ok := ret.Get(0).(func() *sqladmin.Service); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqladmin.Service)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStorageService provides a mock function with given fields:
func (_m *BuilderInterface) GetStorageService() (*storage.Service, error) {
	ret := _m.Called()

	var r0 *storage.Service
	if rf, ok := ret.Get(0).(func() *storage.Service); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.Service)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
